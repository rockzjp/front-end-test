[{"/Users/jianpingzuo/Desktop/front-end-test/src/index.js":"1","/Users/jianpingzuo/Desktop/front-end-test/src/components/App.js":"2","/Users/jianpingzuo/Desktop/front-end-test/src/components/Specialist.js":"3","/Users/jianpingzuo/Desktop/front-end-test/src/components/Login.js":"4","/Users/jianpingzuo/Desktop/front-end-test/src/components/Labour.js":"5","/Users/jianpingzuo/Desktop/front-end-test/src/components/Admin.js":"6","/Users/jianpingzuo/Desktop/front-end-test/src/components/Chat.js":"7","/Users/jianpingzuo/Desktop/front-end-test/src/components/View.js":"8","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageLabourDelete.js":"9","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageLabourAdd.js":"10","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminSpecialistUpdate.js":"11","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminSpecialistAdd.js":"12","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminSpecialistDelete.js":"13","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageLabourUpdate.js":"14","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageWorksiteAdd.js":"15","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageWorksiteDelete.js":"16","/Users/jianpingzuo/Desktop/front-end-test/src/components/ui/Theme.js":"17","/Users/jianpingzuo/Desktop/front-end-test/src/components/ui/Headers.js":"18","/Users/jianpingzuo/Desktop/front-end-test/src/components/specialistpage/SpecialistPageView.js":"19","/Users/jianpingzuo/Desktop/front-end-test/src/components/Card.js":"20","/Users/jianpingzuo/Desktop/front-end-test/src/components/ui/HeaderAdmin.js":"21","/Users/jianpingzuo/Desktop/front-end-test/src/components/ui/EnhancedTableLabourDelete.js":"22","/Users/jianpingzuo/Desktop/front-end-test/src/components/ui/EnhancedTableWorksiteDelete.js":"23","/Users/jianpingzuo/Desktop/front-end-test/src/components/MapView.js":"24","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageViewTable.js":"25","/Users/jianpingzuo/Desktop/front-end-test/src/components/Date.js":"26","/Users/jianpingzuo/Desktop/front-end-test/src/components/Map.js":"27","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageWorksiteTable.js":"28","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageSpecialistTable.js":"29","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageLabourTable.js":"30","/Users/jianpingzuo/Desktop/front-end-test/src/components/Time.js":"31","/Users/jianpingzuo/Desktop/front-end-test/src/components/specialistpage/specialistProjectTable/SpecialistProjectTable.js":"32","/Users/jianpingzuo/Desktop/front-end-test/src/components/ui/EnhancedTable.js":"33"},{"size":245,"mtime":1607642917614,"results":"34","hashOfConfig":"35"},{"size":2210,"mtime":1607642917603,"results":"36","hashOfConfig":"35"},{"size":411,"mtime":1607642917608,"results":"37","hashOfConfig":"35"},{"size":4670,"mtime":1607642917607,"results":"38","hashOfConfig":"35"},{"size":266,"mtime":1607654960931,"results":"39","hashOfConfig":"35"},{"size":290,"mtime":1607642917603,"results":"40","hashOfConfig":"35"},{"size":3241,"mtime":1607642917603,"results":"41","hashOfConfig":"35"},{"size":672,"mtime":1607642917608,"results":"42","hashOfConfig":"35"},{"size":9994,"mtime":1607642917609,"results":"43","hashOfConfig":"35"},{"size":12000,"mtime":1607642917608,"results":"44","hashOfConfig":"35"},{"size":195,"mtime":1607642917611,"results":"45","hashOfConfig":"35"},{"size":9572,"mtime":1607642917610,"results":"46","hashOfConfig":"35"},{"size":8167,"mtime":1607642917610,"results":"47","hashOfConfig":"35"},{"size":195,"mtime":1607642917609,"results":"48","hashOfConfig":"35"},{"size":8662,"mtime":1607642917610,"results":"49","hashOfConfig":"35"},{"size":7797,"mtime":1607642917610,"results":"50","hashOfConfig":"35"},{"size":876,"mtime":1607642917613,"results":"51","hashOfConfig":"35"},{"size":3235,"mtime":1607642917613,"results":"52","hashOfConfig":"35"},{"size":2967,"mtime":1607654937858,"results":"53","hashOfConfig":"35"},{"size":961,"mtime":1607642917603,"results":"54","hashOfConfig":"35"},{"size":19926,"mtime":1607642917613,"results":"55","hashOfConfig":"35"},{"size":11637,"mtime":1607642917612,"results":"56","hashOfConfig":"35"},{"size":11177,"mtime":1607642917613,"results":"57","hashOfConfig":"35"},{"size":2109,"mtime":1607642917608,"results":"58","hashOfConfig":"35"},{"size":452,"mtime":1607642917609,"results":"59","hashOfConfig":"35"},{"size":455,"mtime":1607642917604,"results":"60","hashOfConfig":"35"},{"size":3223,"mtime":1607642917607,"results":"61","hashOfConfig":"35"},{"size":3623,"mtime":1607642917610,"results":"62","hashOfConfig":"35"},{"size":4714,"mtime":1607642917609,"results":"63","hashOfConfig":"35"},{"size":5182,"mtime":1607642917609,"results":"64","hashOfConfig":"35"},{"size":417,"mtime":1607642917608,"results":"65","hashOfConfig":"35"},{"size":11454,"mtime":1607642917611,"results":"66","hashOfConfig":"35"},{"size":11285,"mtime":1607642917612,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1cllqy8",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/Users/jianpingzuo/Desktop/front-end-test/src/index.js",[],["147","148"],"/Users/jianpingzuo/Desktop/front-end-test/src/components/App.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/Specialist.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/Login.js",["149","150"],"import React, {useState, useEffect} from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControl from \"@material-ui/core/FormControl\";\n//import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n//import Checkbox from \"@material-ui/core/Checkbox\";\n//import Link from \"@material-ui/core/Link\";\nimport Paper from \"@material-ui/core/Paper\";\n//import Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n//import {ThemeProvider} from '@material-ui/styles'\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\n\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"90vh\",\n  },\n  image: {\n    backgroundImage: \"url(img/loginpage.jpg)\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor:\n      theme.palette.type === \"dark\"\n        ? theme.palette.grey[900]\n        : theme.palette.grey[50],\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n    width: \"100%\",\n    paddingTop: \"40px\",\n  },\n  paper: {\n    margin: theme.spacing(8, 8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.primary,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  palette: {\n    common: {\n      red: '#AE3034',\n      white: '#F5F5F5'\n    }\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nexport default function SignIn({ loggedIn, logout, login }) {\n  const classes = useStyles();\n  const [role, setRole] =React.useState(\"\");\n\n  //const inputLabel = React.useRef(null);\n  //const [labelWidth, setLabelWidth] = React.useState(0);\n\n  // React.useEffect(() => {\n  //   setLabelWidth(inputLabel.current.offsetWidth);\n  // }, []);\n\n  const handleChange = event => {\n    setRole(event.target.value);\n  };\n\n  return (\n    \n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid container justify=\"center\" className={classes.image}>\n        <Grid\n          item\n          xs={12}\n          sm={8}\n          md={5}\n          component={Paper}\n          direction=\"row\"\n          elevation={6}\n          square\n        >\n          <Grid className={classes.paper}>\n            <Avatar className={classes.avatar}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n              Log in\n            </Typography>\n            <form className={classes.form} noValidate>\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"username\"\n                label=\"User Name\"\n                name=\"username\"\n                autoComplete=\"username\"\n                autoFocus\n              />\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n              />\n\n            <FormControl className={classes.formControl}>\n              <InputLabel id=\"demo-simple-select-label\">Selected</InputLabel>\n                  <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={role}\n                    onChange={handleChange}\n              >\n                    <MenuItem value={10}>Admin</MenuItem>\n                    <MenuItem value={20}>Specialist</MenuItem>\n                    <MenuItem value={30}>Labour</MenuItem>\n                  </Select>\n            </FormControl>\n\n              \n              <Button\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                onClick={login}\n              >\n                Log In\n              </Button>\n              \n              \n            </form>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","/Users/jianpingzuo/Desktop/front-end-test/src/components/Labour.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/Admin.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/Chat.js",["151","152","153","154"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { animateScroll as scroll} from \"react-scroll\";\nimport io from \"socket.io-client\";\nimport \"../Chat.css\";\nimport img1 from './Images/img1.JPEG'\nimport seeRemImg from './Images/seeRemImg.jpg'\n\nlet socket;\nconst CONNECTION_PORT = \"localhost:3002/\";\n\nfunction Chat() {\n  // Before Login\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  \n\n  // After Login\n  \n  const [message, setMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  //const divRef = useRef(null);\n    //useEffect(() => {\n      //divRef.current.scrollIntoView({ behavior: 'smooth'});\n //})\n  //<div ref={divRef}> </div>\n  \n  \n  \n\n  useEffect(() => {\n    socket = io(CONNECTION_PORT);\n  }, [CONNECTION_PORT]);\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageList([...messageList, data]);\n    });\n  });\n\n  \n\n  const connectToRoom = () => {\n    setLoggedIn(true);\n    socket.emit(\"join_room\", room);\n  };\n\n  \n\n\n  const sendMessage = async () => {\n    let messageContent = {\n      room: room,\n      content: {\n        author: userName,\n        message: message,\n      },\n    };\n    await socket.emit(\"send_message\", messageContent);\n    setMessageList([...messageList, messageContent.content]);\n    setMessage(\"\");\n    document.getElementById('myInput').value = '';\n    \n  };\n \n   return (\n    <div className=\"Chat\" style={{ backgroundImage: 'url('+seeRemImg+')', backgroundSize: \"cover\" }}>\n    \n    <img src={img1} alt='seerem'/>\n      {!loggedIn ?   (\n        <div className=\"logIn\"   >\n          <div className=\"inputs\">\n            <input\n              type=\"text\"\n              placeholder=\"Name...\"\n              onChange={(e) => {\n                setUserName(e.target.value);\n              }}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Room...\"\n              onChange={(e) => {\n                setRoom(e.target.value);\n              }}\n            />\n          </div>\n          <button onClick={connectToRoom}>Enter Chat</button>\n        </div>\n      ) : (\n        <div className=\"chatContainer\">\n          <div className=\"messages\">\n            {messageList.map((val, key) => {\n              return (\n                \n                <div\n                  className=\"messageContainer\"\n                  id={val.author == userName ? \"You\" : \"Other\"}\n                >\n                  <div className=\"messageIndividual\">\n                    {val.author}: {val.message}\n                  </div>\n                </div>\n               \n              );\n            })}\n          \n          </div>\n          \n          <div className=\"messageInputs\">\n            <input\n              type=\"text\"\n              id= \"myInput\"\n              placeholder=\"Message...\"\n              onChange={(e) => {\n                setMessage(e.target.value);\n              }}\n            />\n            \n            <button onClick={sendMessage}>Send</button>\n            <a className='button' href='/admin' ><p1>Leave Chat</p1></a>\n            \n          </div>\n        </div>\n      )}\n    </div>\n    \n  );\n}\n\nexport default Chat;","/Users/jianpingzuo/Desktop/front-end-test/src/components/View.js",["155","156"],"import React, {Component} from 'react';\nimport MapView from \"./MapView\";\nimport Card from \"./Card\";\nimport seeRemImg from './Images/seeRemImg.jpg'\n\n\nconst View = props => {\n    return(\n        <div style= {{width: '90%', height: '90%', display: 'inline-block'}} >\n            <div className='row' >\n                <div className='col-sm-8' style= {{  margin: '40px', display: 'inline-block'}}>\n                    <MapView/>\n                </div>\n                <div className='col-sm-2' style= {{ display: 'inline-block'}} >\n                    <Card />\n                </div>\n                \n            </div>\n          \n        </div>\n    )\n}\n\nexport default View;","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageLabourDelete.js",["157","158","159","160","161","162","163","164","165","166","167"],"import React, {useState}from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdorment from '@material-ui/core/InputAdornment';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport {MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Button from '@material-ui/core/Button';\nimport {format} from 'date-fns';\nimport EnhancedTableLabourDelete from '../ui/EnhancedTableLabourDelete'\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n   headtypo: {\n    color: \"#AE3034\"\n   },\n   tablehead: {\n       fontSize: \"1em\",\n       color: \"#AE3034\",\n       borderColor: \"AE3034\"\n   },\n   button: {\n       color: \"#fff\",\n       backgroundColor: \"#AE3034\",\n       borderRadius: 50,\n       textTransform: \"none\",\n       \"&:hover\": {\n           backgroundColor: \"#F5F5F5\"\n       }\n   }\n   \n   \n}))\n\n\nfunction createData(name,project, location, workhour,phoneno, supervisor, supervisorno, date,search ) {\n    return {name,project, location, workhour,phoneno, supervisor, supervisorno, date,search}\n}\n\n\nconst AdminPageLabourDelete = () => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [rows, setRows] = useState([\n        createData(\n            \"Tom\", \"ka300\", \"Toronto\", \"23\", \"1233455678\",\"Jack\", \"3455431234\", \"11/23/2020\",true),\n            createData(\n                \"Smith\", \"ks23300\", \"Markham\", \"56\", \"5678901234\",\"Jack\", \"3455431234\", \"11/20/2020\",true),\n                createData(\n                    \"Harry\", \"Ud306\", \"Toronto\", \"30\", \"67890212128\",\"Young\", \"2308906789\", \"10/23/2020\",true),\n        ]);\n\n    const [dialogOpen, setDialogOpen] = useState(false);\n    const [name, setName] = useState(\"\");\n    const [project, setProject] = useState(\"\");\n    const [location, setLocation] = useState(\"\");\n    const [workhour, setWorkhour] = useState(\"\");\n    const [phoneno, setPhoneno] = useState(\"\");\n    const [supervisor, setSupervisor] = useState(\"\");\n    const [supervisorno, setSupervisorno] = useState(\"\");\n    const [date, setDate] = useState(new Date());\n    const [search, setSearch] = useState(\"\");\n    \n\n\n\n    const deleteLabour = () => {\n        setRows([...rows, createData(\n                                     name,\n                                     project, \n                                     location,\n                                     workhour,\n                                     phoneno,\n                                     supervisor,\n                                     supervisorno,\n                                     format(date, \"MM/dd/yyyy\"),\n                                     true\n                                     )])\n        setDialogOpen(false)\n        setName(\"\")\n        setProject(\"\")\n        setLocation(\"\")\n        setWorkhour(\"\")\n        setPhoneno(\"\")\n        setSupervisor(\"\")\n        setSupervisorno(\"\")\n        setDate(new Date())\n    }\n\n    const handleSearch = event => {\n        setSearch(event.target.value)\n\n        const rowData = rows.map(row => Object.values(row).filter(option => option !== true && option !== false));\n        const matches = rowData.map(row => row.map(option => \n            option.toLowerCase().includes(event.target.value.toLowerCase()) ));\n        \n        const newRows = [...rows];\n        matches.map((row, index) => row.includes(true) ? \n        newRows[index].search = true : newRows[index].search = false);\n\n        setRows(newRows);\n       \n        \n       \n            \n        console.log(matches);   \n       \n    }\n\n    return (\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container direction=\"column\">\n            <Grid item style={{marginTop: \"2em\", marginLeft: \"5em\"}}>\n                <Typography variant=\"h4\" className={classes.headtypo}>\n                    Labour Delete\n                </Typography>\n            <Grid item>\n                <TextField \n                   style={{width: \"35em\", marginLeft: \"0.3em\", marginTop: \"2em\"}}\n                   placeholder=\"Delete Labour\"\n                   value={search}\n                   onChange={handleSearch}\n                    />\n            </Grid>\n\n            <Grid item></Grid>\n            </Grid>\n\n\n            \n\n\n            <Grid item style={{marginBottom: \" 8em\"}}>\n             <EnhancedTableLabourDelete rows={rows} setRows={setRows} />\n            </Grid>\n\n\n             <Dialog fullWidth maxWidth=\"md\" open={dialogOpen} onClose={() => setDialogOpen(false)}>\n                <Grid container justify=\"center\" style={{marginTop: \"2em\", color: \"#AE3034\"}} >\n                    <Grid item>\n                        <Typography variant=\"h4\" gutterBottom>\n                          Delete a Labour\n\n                        </Typography>\n                    </Grid>\n                </Grid>\n                <DialogContent>\n                <Grid container style={{marginLeft: \"1em\", marginBottom: \"3em\"}} justify=\"space-between\">\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Username\" id=\"name\" value={name} onChange={(event) => setName(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    \n                    \n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Project\" id=\"project\" value={project} onChange={(event) => setProject(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Losition\" id=\"location\" value={location} onChange={(event) => setLocation(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Workhour\" id=\"workhour\" value={workhour} onChange={(event) => setWorkhour(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    \n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Phone No.\" id=\"phoneno\" value={phoneno} onChange={(event) => setPhoneno(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Supervisor\" id=\"supervisor\" value={supervisor} onChange={(event) => setSupervisor(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Supervisor No.\" id=\"supervisorno\" value={supervisorno} onChange={(event) => setSupervisorno(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"6em\"}}>\n                            <Grid item>\n                                <KeyboardDatePicker format=\"MM/dd/yyyy\" value={date} onChange={newDate => setDate(newDate)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    \n\n\n                    \n\n                    \n\n\n                </Grid>\n                <Grid container justify=\"center\" style={{marginTop: \"3em\"}}>\n                    <Grid item>\n                        <Button \n                          container=\"primary\"\n                          onClick={() => setDialogOpen(false)}\n                        >\n                            Cancel</Button>\n                    </Grid>\n\n                    <Grid item>\n                        <Button \n                           variant=\"contained\" \n                           className={classes.button}\n                           onClick={deleteLabour}\n                           \n                           >\n                             - Delete Labour -\n                            </Button>\n                    </Grid>\n                </Grid>\n\n                </DialogContent>\n             </Dialog>\n        </Grid>\n        </MuiPickersUtilsProvider>\n    )\n}\n\nexport default AdminPageLabourDelete\n","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageLabourAdd.js",["168"],"import React, {useState}from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdorment from '@material-ui/core/InputAdornment';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport {MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Button from '@material-ui/core/Button';\nimport {format} from 'date-fns';\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n   headtypo: {\n    color: \"#AE3034\"\n   },\n   tablehead: {\n       fontSize: \"1em\",\n       color: \"#AE3034\",\n       borderColor: \"AE3034\"\n   },\n   button: {\n       color: \"#fff\",\n       backgroundColor: \"#AE3034\",\n       borderRadius: 50,\n       textTransform: \"none\",\n       \"&:hover\": {\n           backgroundColor: \"#F5F5F5\"\n       }\n   }\n   \n   \n}))\n\n\nfunction createData(username,location, workhour, phoneno, project,supervisor, supervisorno,date ) {\n    return {username,location, workhour, phoneno, project,supervisor, supervisorno,date}\n}\n\n\nconst AdminLabourAdd = () => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [rows, setRows] = useState([\n        createData(\n            \"Tom\", \"Toronto\", \"12\", \"1234567890\", \"X233\", \"Mike\", \"1234567890\", \"11/23/2020\"),\n            createData(\n                \"Smith\", \"Toronto\", \"56\", \"9876543210\", \"AM565\", \"Mike\", \"1234567890\", \"11/30/2020\"),\n                createData(\n                    \"John\", \"Toronto\", \"45\", \"1565424432\", \"DB56\", \"Herry\", \"1438573456\", \"110/20/2020\"),\n        ]);\n\n    const [dialogOpen, setDialogOpen] = useState(false);\n    const [username, setUsername] = useState(\"\");\n    const [location, setLocation] = useState(\"\");\n    const [workhour, setWorkhour] = useState(\"\");\n    const [phoneno, setPhoneno] = useState(\"\");\n    const [project, setProject] = useState(\"\");\n    const [supervisor, setSupervisor] = useState(\"\");\n    const [supervisorno, setSupervisorno] = useState(\"\");\n    const [date, setDate] = useState(new Date());\n\n    \n\n\n\n    const addLabour = () => {\n        setRows([...rows, createData(\n                                     username,\n                                     location,\n                                     workhour,\n                                     phoneno,\n                                     project,\n                                     supervisor,\n                                     supervisorno,\n                                     format(date, \"MM/dd/yyyy\"),\n                                     )])\n        setDialogOpen(false)\n        setUsername(\"\")\n        setLocation(\"\")\n        setWorkhour(\"\")\n        setPhoneno(\"\")\n        setProject(\"\")\n        setSupervisor(\"\")\n        setSupervisorno(\"\")\n        setDate(new Date())\n    }\n\n    \n\n    return (\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container direction=\"column\">\n            <Grid item style={{marginTop: \"2em\", marginLeft: \"5em\"}}>\n                <Typography variant=\"h4\" className={classes.headtypo}>\n                    Labour Add\n                </Typography>\n            <Grid item>\n                <TextField \n                   style={{width: \"35em\", marginLeft: \"5em\", marginTop: \"2em\"}}\n                   placeholder=\"Add Labour\"\n                   InputProps={{endAdornment: <InputAdorment \n                                                position=\"end\" onClick={() => setDialogOpen(true)}\n                                                style={{cursor: \"pointer\"}} \n                                               > \n                \n                <AddCircleIcon color=\"primary\" style={{fontSize: 30}}/> \n                \n                </InputAdorment>}} />\n            </Grid>\n\n            <Grid item></Grid>\n            </Grid>\n\n\n            <Grid item container justify=\"flex-end\" style={{marginTop: \"5em\"}}>\n                <Grid item style={{marginRight: 50}}>\n                    <FilterListIcon color=\"primary\" style={{fontSize: 35}}/>\n                </Grid>\n            </Grid>\n\n            \n            <Grid item style={{marginBottom: \" 8em\"}}>\n                <TableContainer component={Paper}>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell className={classes.tablehead}>\n                                    Username\n                                </TableCell>\n\n                                <TableCell className={classes.tablehead}>\n                                    Location\n                                </TableCell>\n\n                                <TableCell className={classes.tablehead}>\n                                    Work-hour\n                                </TableCell>\n\n                                <TableCell className={classes.tablehead}>\n                                    Phone\n                                </TableCell>\n\n                                <TableCell className={classes.tablehead}>\n                                    Project\n                                </TableCell>\n\n                                <TableCell className={classes.tablehead}>\n                                    Supervisor\n                                </TableCell>\n\n                                <TableCell className={classes.tablehead}>\n                                    Supervisor No.\n                                </TableCell>\n\n                                <TableCell className={classes.tablehead}>\n                                    Date\n                                </TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        \n                        <TableBody>\n                            {rows.map((row, index) => <TableRow key={index}>\n                            <TableCell>{row.username}</TableCell>\n                            <TableCell>{row.location}</TableCell>\n                            <TableCell>{row.workhour}</TableCell>\n                            <TableCell>{row.phoneno}</TableCell>\n                            <TableCell>{row.project}</TableCell>\n                            <TableCell>{row.supervisor}</TableCell>\n                            <TableCell>{row.supervisorno}</TableCell>\n                            <TableCell>{row.date}</TableCell>\n\n                            </TableRow>)}\n                        </TableBody>\n                    </Table>\n\n                </TableContainer>\n            </Grid>\n\n\n             <Dialog fullWidth maxWidth=\"md\" open={dialogOpen} onClose={() => setDialogOpen(false)}>\n                <Grid container justify=\"center\" style={{marginTop: \"2em\", color: \"#AE3034\"}} >\n                    <Grid item>\n                        <Typography variant=\"h4\" gutterBottom>\n                          Add a Labour \n\n                        </Typography>\n                    </Grid>\n                </Grid>\n                <DialogContent>\n                <Grid container style={{marginLeft: \"1em\", marginBottom: \"3em\"}} justify=\"space-between\">\n                \n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Username\" id=\"username\" value={username} onChange={(event) => setUsername(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    \n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Location\" id=\"location\" value={location} onChange={(event) => setLocation(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Work-Hour\" id=\"workhour\" value={workhour} onChange={(event) => setWorkhour(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    \n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Phone No.\" id=\"phoneno\" value={phoneno} onChange={(event) => setPhoneno(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Project\" id=\"project\" value={project} onChange={(event) => setProject(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Supervisor\" id=\"supervisor\" value={supervisor} onChange={(event) => setSupervisor(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Supervisor No.\" id=\"supervisorno\" value={supervisorno} onChange={(event) => setSupervisorno(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"6em\"}}>\n                            <Grid item>\n                                <KeyboardDatePicker format=\"MM/dd/yyyy\" value={date} onChange={newDate => setDate(newDate)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    </Grid>\n\n\n                <Grid container justify=\"center\" style={{marginTop: \"3em\"}}>\n                    <Grid item>\n                        <Button \n                          container=\"primary\"\n                          onClick={() => setDialogOpen(false)}\n                        >\n                            Cancel</Button>\n                    </Grid>\n\n                    <Grid item>\n                        <Button \n                           variant=\"contained\" \n                           className={classes.button}\n                           onClick={addLabour}\n                           \n                           >\n                             - Add Specialist -\n                            </Button>\n                    </Grid>\n                </Grid>\n\n                </DialogContent>\n             </Dialog>\n        </Grid>\n        </MuiPickersUtilsProvider>\n    )\n}\n\nexport default AdminLabourAdd\n\n","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminSpecialistUpdate.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminSpecialistAdd.js",["169"],"import React, {useState}from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdorment from '@material-ui/core/InputAdornment';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport {MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Button from '@material-ui/core/Button';\nimport {format} from 'date-fns';\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n   headtypo: {\n    color: \"#AE3034\"\n   },\n   tablehead: {\n       fontSize: \"1em\",\n       color: \"#AE3034\",\n       borderColor: \"AE3034\"\n   },\n   button: {\n       color: \"#fff\",\n       backgroundColor: \"#AE3034\",\n       borderRadius: 50,\n       textTransform: \"none\",\n       \"&:hover\": {\n           backgroundColor: \"#F5F5F5\"\n       }\n   }\n   \n   \n}))\n\n\nfunction createData(username,position, phoneno, project,date ) {\n    return {username, position, phoneno,project, date}\n}\n\n\nconst AdminSpecialistDelete = () => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [rows, setRows] = useState([\n        createData(\n            \"Tom\", \"Supervisor\", \"1231231234\", \"Xam123\", \"11/23/2020\"),\n            createData(\n                \"Mike\", \"Supervisor\", \"3453453456\", \"Cad34\",\"11/25/2020\"),\n                createData(\n                    \"John\", \"Supervisor\", \"4565677890\",\"BGH22\",\"11/23/2020\"),\n        ]);\n\n    const [dialogOpen, setDialogOpen] = useState(false);\n    const [username, setUsername] = useState(\"\");\n    const [position, setPosition] = useState(\"\");\n    const [phoneno, setPhoneno] = useState(\"\");\n    const [project, setProject] = useState(\"\");\n    const [date, setDate] = useState(new Date());\n    \n\n\n\n    const addSpecialist = () => {\n        setRows([...rows, createData(\n                                     username,\n                                     position, \n                                     phoneno, \n                                     project,\n                                     format(date, \"MM/dd/yyyy\")\n                                     \n                                     )])\n        setDialogOpen(false)\n        setUsername(\"\")\n        setPosition(\"\")\n        setPhoneno(\"\")\n        setProject(\"\")\n        setDate(new Date())\n    }\n\n\n\n    return (\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container direction=\"column\">\n            <Grid item style={{marginTop: \"2em\", marginLeft: \"5em\"}}>\n                <Typography variant=\"h4\" className={classes.headtypo}>\n                    Specialist Add\n                </Typography>\n            <Grid item>\n                <TextField \n                   style={{width: \"35em\", marginLeft: \"5em\", marginTop: \"2em\"}}\n                   placeholder=\"Add Specialist\"\n                   InputProps={{endAdornment: <InputAdorment \n                                                position=\"end\" onClick={() => setDialogOpen(true)}\n                                                style={{cursor: \"pointer\"}} \n                                               > \n                \n                <AddCircleIcon color=\"primary\" style={{fontSize: 30}}/> \n                \n                </InputAdorment>}} />\n            </Grid>\n\n            <Grid item></Grid>\n            </Grid>\n\n\n            <Grid item container justify=\"flex-end\" style={{marginTop: \"5em\"}}>\n                <Grid item style={{marginRight: 50}}>\n                    <FilterListIcon color=\"primary\" style={{fontSize: 35}}/>\n                </Grid>\n            </Grid>\n\n\n            <Grid item style={{marginBottom: \" 8em\"}}>\n                <TableContainer component={Paper}>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell className={classes.tablehead}>\n                                    Username\n                                </TableCell>\n\n                                <TableCell className={classes.tablehead}>\n                                    Position\n                                </TableCell>\n\n                                <TableCell className={classes.tablehead}>\n                                    Phone No.\n                                </TableCell>\n\n                                <TableCell className={classes.tablehead}>\n                                    Project\n                                </TableCell>\n\n                                <TableCell className={classes.tablehead}>\n                                    Date\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n\n                        <TableBody>\n                            {rows.map((row, index) => <TableRow key={index}>\n                            <TableCell>{row.username}</TableCell>\n                            <TableCell>{row.position}</TableCell>\n                            <TableCell>{row.phoneno}</TableCell>\n                            <TableCell>{row.project}</TableCell>\n                            <TableCell>{row.date}</TableCell>\n                            </TableRow>)}\n                        </TableBody>\n                    </Table>\n\n                </TableContainer>\n            </Grid>\n\n\n             <Dialog fullWidth maxWidth=\"md\" open={dialogOpen} onClose={() => setDialogOpen(false)}>\n                <Grid container justify=\"center\" style={{marginTop: \"2em\", color: \"#AE3034\"}} >\n                    <Grid item>\n                        <Typography variant=\"h4\" gutterBottom>\n                          Add a Specialist\n\n                        </Typography>\n                    </Grid>\n                </Grid>\n                <DialogContent>\n                <Grid container style={{marginLeft: \"1em\", marginBottom: \"3em\"}} justify=\"space-between\">\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Username\" id=\"username\" value={username} onChange={(event) => setUsername(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    \n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Position\" id=\"position\" value={position} onChange={(event) => setPosition(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Project\" id=\"project\" value={project} onChange={(event) => setProject(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    \n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Phone No.\" id=\"phoneno\" value={phoneno} onChange={(event) => setPhoneno(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"6em\"}}>\n                            <Grid item>\n                                <KeyboardDatePicker format=\"MM/dd/yyyy\" value={date} onChange={newDate => setDate(newDate)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    \n\n\n                    \n\n                    \n\n\n                </Grid>\n                <Grid container justify=\"center\" style={{marginTop: \"3em\"}}>\n                    <Grid item>\n                        <Button \n                          container=\"primary\"\n                          onClick={() => setDialogOpen(false)}\n                        >\n                            Cancel</Button>\n                    </Grid>\n\n                    <Grid item>\n                        <Button \n                           variant=\"contained\" \n                           className={classes.button}\n                           onClick={addSpecialist}\n                           \n                           >\n                             - Add Specialist -\n                            </Button>\n                    </Grid>\n                </Grid>\n\n                </DialogContent>\n             </Dialog>\n        </Grid>\n        </MuiPickersUtilsProvider>\n    )\n}\n\nexport default AdminSpecialistDelete\n","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminSpecialistDelete.js",["170","171","172","173","174","175","176","177","178","179","180"],"import React, {useState}from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdorment from '@material-ui/core/InputAdornment';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport {MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Button from '@material-ui/core/Button';\nimport {format} from 'date-fns';\nimport EnhancedTable from '../ui/EnhancedTable'\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n   headtypo: {\n    color: \"#AE3034\"\n   },\n   tablehead: {\n       fontSize: \"1em\",\n       color: \"#AE3034\",\n       borderColor: \"AE3034\"\n   },\n   button: {\n       color: \"#fff\",\n       backgroundColor: \"#AE3034\",\n       borderRadius: 50,\n       textTransform: \"none\",\n       \"&:hover\": {\n           backgroundColor: \"#F5F5F5\"\n       }\n   }\n   \n   \n}))\n\n\nfunction createData(name,position, phoneno, project,date,search ) {\n    return {name, position, phoneno,project, date, search}\n}\n\n\nconst AdminSpecialistDelete = () => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [rows, setRows] = useState([\n        createData(\n            \"Tom\", \"Supervisor\", \"1231231234\", \"Xam123\", \"11/23/2020\",true),\n            createData(\n                \"Mike\", \"Supervisor\", \"3453453456\", \"Cad34\",\"11/25/2020\",true),\n                createData(\n                    \"John\", \"Supervisor\", \"4565677890\",\"BGH22\",\"11/23/2020\",true),\n        ]);\n\n    const [dialogOpen, setDialogOpen] = useState(false);\n    const [name, setUsername] = useState(\"\");\n    const [position, setPosition] = useState(\"\");\n    const [phoneno, setPhoneno] = useState(\"\");\n    const [project, setProject] = useState(\"\");\n    const [date, setDate] = useState(new Date());\n    const [search, setSearch] = useState(\"\");\n    \n\n\n\n    const deleteSpecialist = () => {\n        setRows([...rows, createData(\n                                     name,\n                                     position, \n                                     phoneno, \n                                     project,\n                                     format(date, \"MM/dd/yyyy\"),\n                                     true\n                                     )])\n        setDialogOpen(false)\n        setUsername(\"\")\n        setPosition(\"\")\n        setPhoneno(\"\")\n        setProject(\"\")\n        setDate(new Date())\n    }\n\n    const handleSearch = event => {\n        setSearch(event.target.value)\n\n        const rowData = rows.map(row => Object.values(row).filter(option => option !== true && option !== false));\n        const matches = rowData.map(row => row.map(option => \n            option.toLowerCase().includes(event.target.value.toLowerCase()) ));\n        \n        const newRows = [...rows];\n        matches.map((row, index) => row.includes(true) ? \n        newRows[index].search = true : newRows[index].search = false);\n\n        setRows(newRows);\n       \n        \n       \n            \n        console.log(matches);   \n       \n    }\n\n    return (\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container direction=\"column\">\n            <Grid item style={{marginTop: \"2em\", marginLeft: \"5em\"}}>\n                <Typography variant=\"h4\" className={classes.headtypo}>\n                    Specialist Delete\n                </Typography>\n            <Grid item>\n                <TextField \n                   style={{width: \"35em\", marginLeft: \"0.3em\", marginTop: \"2em\"}}\n                   placeholder=\"Delete Specialist\"\n                   value={search}\n                   onChange={handleSearch}\n                    />\n            </Grid>\n\n            <Grid item></Grid>\n            </Grid>\n\n\n            \n\n\n            <Grid item style={{marginBottom: \" 8em\"}}>\n             <EnhancedTable rows={rows} setRows={setRows} />\n            </Grid>\n\n\n             <Dialog fullWidth maxWidth=\"md\" open={dialogOpen} onClose={() => setDialogOpen(false)}>\n                <Grid container justify=\"center\" style={{marginTop: \"2em\", color: \"#AE3034\"}} >\n                    <Grid item>\n                        <Typography variant=\"h4\" gutterBottom>\n                          Delete a Specialist\n\n                        </Typography>\n                    </Grid>\n                </Grid>\n                <DialogContent>\n                <Grid container style={{marginLeft: \"1em\", marginBottom: \"3em\"}} justify=\"space-between\">\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Username\" id=\"name\" value={name} onChange={(event) => setUsername(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    \n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Position\" id=\"position\" value={position} onChange={(event) => setPosition(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Project\" id=\"project\" value={project} onChange={(event) => setProject(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    \n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Phone No.\" id=\"phoneno\" value={phoneno} onChange={(event) => setPhoneno(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"6em\"}}>\n                            <Grid item>\n                                <KeyboardDatePicker format=\"MM/dd/yyyy\" value={date} onChange={newDate => setDate(newDate)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    \n\n\n                    \n\n                    \n\n\n                </Grid>\n                <Grid container justify=\"center\" style={{marginTop: \"3em\"}}>\n                    <Grid item>\n                        <Button \n                          container=\"primary\"\n                          onClick={() => setDialogOpen(false)}\n                        >\n                            Cancel</Button>\n                    </Grid>\n\n                    <Grid item>\n                        <Button \n                           variant=\"contained\" \n                           className={classes.button}\n                           onClick={deleteSpecialist}\n                           \n                           >\n                             - Delete Specialist -\n                            </Button>\n                    </Grid>\n                </Grid>\n\n                </DialogContent>\n             </Dialog>\n        </Grid>\n        </MuiPickersUtilsProvider>\n    )\n}\n\nexport default AdminSpecialistDelete\n","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageLabourUpdate.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageWorksiteAdd.js",["181"],"import React, {useState}from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdorment from '@material-ui/core/InputAdornment';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport {MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Button from '@material-ui/core/Button';\nimport {format} from 'date-fns';\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n   headtypo: {\n    color: \"#AE3034\"\n   },\n   tablehead: {\n       fontSize: \"1em\",\n       color: \"#AE3034\",\n       borderColor: \"AE3034\"\n   },\n   button: {\n       color: \"#fff\",\n       backgroundColor: \"#AE3034\",\n       borderRadius: 50,\n       textTransform: \"none\",\n       \"&:hover\": {\n           backgroundColor: \"#F5F5F5\"\n       }\n   }\n   \n   \n}))\n\n\nfunction createData(project,location,information,date ) {\n    return {project,location,information, date}\n}\n\n\nconst AdminWorksiteAdd = () => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [rows, setRows] = useState([\n        createData(\n            \"SH23\", \"ontario toront\", \"need many workers and 4 supervisor\"),\n            createData(\n                \"SH23\", \"ontario toront\", \"need many workers and 4 supervisor\"),\n                createData(\n                    \"SH23\", \"ontario toront\", \"need many workers and 4 supervisor\"),\n        ]);\n\n    const [dialogOpen, setDialogOpen] = useState(false);\n    const [project, setProject] = useState(\"\");\n    const [location, setLocation] = useState(\"\");\n    const [information, setInformation] = useState(\"\");\n    const [date, setDate] = useState(new Date());\n    \n\n\n\n    const addWorksite = () => {\n        setRows([...rows, createData(\n                                     project,\n                                     location, \n                                     information, \n                                     format(date, \"MM/dd/yyyy\")\n                                     \n                                     )])\n        setDialogOpen(false)\n        setProject(\"\")\n        setLocation(\"\")\n        setInformation(\"\")\n        setDate(new Date())\n    }\n\n\n\n    return (\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container direction=\"column\">\n            <Grid item style={{marginTop: \"2em\", marginLeft: \"5em\"}}>\n                <Typography variant=\"h4\" className={classes.headtypo}>\n                    Work Site Add\n                </Typography>\n            <Grid item>\n                <TextField \n                   style={{width: \"35em\", marginLeft: \"5em\", marginTop: \"2em\"}}\n                   placeholder=\"Add Work Site\"\n                   InputProps={{endAdornment: <InputAdorment \n                                                position=\"end\" onClick={() => setDialogOpen(true)}\n                                                style={{cursor: \"pointer\"}} \n                                               > \n                \n                <AddCircleIcon color=\"primary\" style={{fontSize: 30}}/> \n                \n                </InputAdorment>}} />\n            </Grid>\n\n            <Grid item></Grid>\n            </Grid>\n\n\n            <Grid item container justify=\"flex-end\" style={{marginTop: \"5em\"}}>\n                <Grid item style={{marginRight: 50}}>\n                    <FilterListIcon color=\"primary\" style={{fontSize: 35}}/>\n                </Grid>\n            </Grid>\n\n\n            <Grid item style={{marginBottom: \" 8em\"}}>\n                <TableContainer component={Paper}>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell className={classes.tablehead}>\n                                    Project ID\n                                </TableCell>\n\n                                <TableCell className={classes.tablehead}>\n                                    Location\n                                </TableCell>\n\n                                <TableCell className={classes.tablehead}>\n                                   Information\n                                </TableCell>\n\n                                \n                            </TableRow>\n                        </TableHead>\n\n                        <TableBody>\n                            {rows.map((row, index) => <TableRow key={index}>\n                            <TableCell>{row.project}</TableCell>\n                            <TableCell>{row.location}</TableCell>\n                            <TableCell>{row.information}</TableCell>\n                        </TableRow>)}\n                        </TableBody>\n                    </Table>\n\n                </TableContainer>\n            </Grid>\n\n\n             <Dialog fullWidth maxWidth=\"md\" open={dialogOpen} onClose={() => setDialogOpen(false)}>\n                <Grid container justify=\"center\" style={{marginTop: \"2em\", color: \"#AE3034\"}} >\n                    <Grid item>\n                        <Typography variant=\"h4\" gutterBottom>\n                          Add a Work Site\n\n                        </Typography>\n                    </Grid>\n                </Grid>\n                <DialogContent>\n                <Grid container style={{marginLeft: \"1em\", marginBottom: \"3em\"}} justify=\"space-between\">\n                    <Grid item>\n\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"project\" id=\"project\" value={project} onChange={(event) => setProject(event.target.value)} />\n                            </Grid>\n                        </Grid>\n\n                    </Grid>\n                    \n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Location\" id=\"location\" value={location} onChange={(event) => setLocation(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Information\" id=\"information\" value={information} onChange={(event) => setInformation(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    \n                    \n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"6em\"}}>\n                            <Grid item>\n                                <KeyboardDatePicker format=\"MM/dd/yyyy\" value={date} onChange={newDate => setDate(newDate)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    \n\n\n                    \n\n                    \n\n\n                </Grid>\n                <Grid container justify=\"center\" style={{marginTop: \"3em\"}}>\n                    <Grid item>\n                        <Button \n                          container=\"primary\"\n                          onClick={() => setDialogOpen(false)}\n                        >\n                            Cancel</Button>\n                    </Grid>\n\n                    <Grid item>\n                        <Button \n                           variant=\"contained\" \n                           className={classes.button}\n                           onClick={addWorksite}\n                           \n                           >\n                             - Add WorkSite -\n                            </Button>\n                    </Grid>\n                </Grid>\n\n                </DialogContent>\n             </Dialog>\n        </Grid>\n        </MuiPickersUtilsProvider>\n    )\n}\n\nexport default AdminWorksiteAdd\n","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageWorksiteDelete.js",["182","183","184","185","186","187","188","189","190","191","192"],"import React, {useState}from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdorment from '@material-ui/core/InputAdornment';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport {MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Button from '@material-ui/core/Button';\nimport {format} from 'date-fns';\nimport EnhancedTableWorksiteDelete from '../ui/EnhancedTableWorksiteDelete'\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n   headtypo: {\n    color: \"#AE3034\"\n   },\n   tablehead: {\n       fontSize: \"1em\",\n       color: \"#AE3034\",\n       borderColor: \"AE3034\"\n   },\n   button: {\n       color: \"#fff\",\n       backgroundColor: \"#AE3034\",\n       borderRadius: 50,\n       textTransform: \"none\",\n       \"&:hover\": {\n           backgroundColor: \"#F5F5F5\"\n       }\n   }\n   \n   \n}))\n\n\nfunction createData(project, location, information, date,search ) {\n    return {project, location, information, date,search}\n}\n\n\nconst AdminPageWorksiteDelete = () => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [rows, setRows] = useState([\n        createData(\n             \"ka300\", \"Toronto\", \"how many worker and supervisor\", \"11/23/2020\",true),\n            createData(\n                \"kH456\", \"York\", \"processing very well\", \"8/23/2020\",true),\n                createData(\n                    \"AR34\", \"Toronto\", \"where is the location\", \"10/3/2020\",true),\n        ]);\n\n    const [dialogOpen, setDialogOpen] = useState(false);\n    const [project, setProject] = useState(\"\");\n    const [location, setLocation] = useState(\"\");\n    const [information, setInformation] = useState(\"\");\n    const [date, setDate] = useState(new Date());\n    const [search, setSearch] = useState(\"\");\n    \n\n\n\n    const deleteLabour = () => {\n        setRows([...rows, createData(\n                                \n                                     project, \n                                     location,\n                                     information,\n                                     format(date, \"MM/dd/yyyy\"),\n                                     true\n                                     )])\n        setDialogOpen(false)\n        setProject(\"\")\n        setLocation(\"\")\n        setInformation(\"\")\n        setDate(new Date())\n    }\n\n    const handleSearch = event => {\n        setSearch(event.target.value)\n\n        const rowData = rows.map(row => Object.values(row).filter(option => option !== true && option !== false));\n        const matches = rowData.map(row => row.map(option => \n            option.toLowerCase().includes(event.target.value.toLowerCase()) ));\n        \n        const newRows = [...rows];\n        matches.map((row, index) => row.includes(true) ? \n        newRows[index].search = true : newRows[index].search = false);\n\n        setRows(newRows);\n       \n        \n       \n            \n        console.log(matches);   \n       \n    }\n\n    return (\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container direction=\"column\">\n            <Grid item style={{marginTop: \"2em\", marginLeft: \"5em\"}}>\n                <Typography variant=\"h4\" className={classes.headtypo}>\n                    Worksite Delete\n                </Typography>\n            <Grid item>\n                <TextField \n                   style={{width: \"35em\", marginLeft: \"0.3em\", marginTop: \"2em\"}}\n                   placeholder=\"Delete Worksite\"\n                   value={search}\n                   onChange={handleSearch}\n                    />\n            </Grid>\n\n            <Grid item></Grid>\n            </Grid>\n\n\n            \n\n\n            <Grid item style={{marginBottom: \" 8em\"}}>\n             <EnhancedTableWorksiteDelete rows={rows} setRows={setRows} />\n            </Grid>\n\n\n             <Dialog fullWidth maxWidth=\"md\" open={dialogOpen} onClose={() => setDialogOpen(false)}>\n                <Grid container justify=\"center\" style={{marginTop: \"2em\", color: \"#AE3034\"}} >\n                    <Grid item>\n                        <Typography variant=\"h4\" gutterBottom>\n                          Delete a Worksite\n\n                        </Typography>\n                    </Grid>\n                </Grid>\n                <DialogContent>\n                <Grid container style={{marginLeft: \"1em\", marginBottom: \"3em\"}} justify=\"space-between\">\n                    \n                    \n                    \n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Project\" id=\"project\" value={project} onChange={(event) => setProject(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Losition\" id=\"location\" value={location} onChange={(event) => setLocation(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"5em\"}}>\n                            <Grid item>\n                                <TextField label=\"Information\" id=\"informationr\" value={information} onChange={(event) => setInformation(event.target.value)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    \n\n\n\n                    <Grid item>\n                        <Grid item container direction=\"column\" sm style={{marginTop: \"6em\"}}>\n                            <Grid item>\n                                <KeyboardDatePicker format=\"MM/dd/yyyy\" value={date} onChange={newDate => setDate(newDate)} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    \n\n\n                    \n\n                    \n\n\n                </Grid>\n                <Grid container justify=\"center\" style={{marginTop: \"3em\"}}>\n                    <Grid item>\n                        <Button \n                          container=\"primary\"\n                          onClick={() => setDialogOpen(false)}\n                        >\n                            Cancel</Button>\n                    </Grid>\n\n                    <Grid item>\n                        <Button \n                           variant=\"contained\" \n                           className={classes.button}\n                           onClick={deleteLabour}\n                           \n                           >\n                             - Delete Worksite -\n                            </Button>\n                    </Grid>\n                </Grid>\n\n                </DialogContent>\n             </Dialog>\n        </Grid>\n        </MuiPickersUtilsProvider>\n    )\n}\n\nexport default AdminPageWorksiteDelete\n","/Users/jianpingzuo/Desktop/front-end-test/src/components/ui/Theme.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/ui/Headers.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/specialistpage/SpecialistPageView.js",["193"],"import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Link from \"@material-ui/core/Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport SpecialistPageProjectTable from './specialistProjectTable/SpecialistProjectTable'\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  \n  heroButtons: {\n    marginTop: theme.spacing(8),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  \n  cardContent: {\n    flexGrow: 1,\n  },\n  \n}));\n\nconst cards = [\n    {\n        name: \"Profile\",\n        path: \"dashboard\",\n        component: <SpecialistPageProjectTable />\n      },\n      {\n        name: \"Project\",\n        path: \"dashboard\",\n        \n      },\n      {\n        name: \"Labour\",\n        path: \"dashboard\",\n        \n      },\n];\n\nexport default function PageProjectTable() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <main>\n        \n         <div>   \n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Button\n                    component={RouterLink}\n                    to={\"/login\"}\n                    variant=\"contained\"\n                    color=\"primary\"\n                  >\n                    Map\n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n          </div>\n\n\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          <Grid container spacing={4}>\n            {cards.map((card) => (\n              <Grid item key={card.name} xs={12} sm={6} md={4}>\n                <Card className={classes.card}>\n                  \n                  <CardContent className={classes.cardContent}>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      {card.name}\n                    </Typography>\n                      {card.component}\n                  </CardContent>\n                  <CardActions>\n                    <Button\n                      color=\"#AE3034\"\n                      variant=\"outlined\"\n                      component={RouterLink}\n                      to={`/${card.path}`}\n                      fullWidth\n                    >\n                      View\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Container>\n      </main>\n      \n    </React.Fragment>\n  );\n}\n","/Users/jianpingzuo/Desktop/front-end-test/src/components/Card.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/ui/HeaderAdmin.js",["194"],"import React, {useState, useEffect} from 'react';\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport {makeStyles} from '@material-ui/styles'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport {Link} from 'react-router-dom'\nimport Button from '@material-ui/core/Button'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\nimport {useTheme} from '@material-ui/core/styles'\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport { IconButton } from '@material-ui/core'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\n\n\n\n/////////////////////////////\nfunction ElevationScroll(props) {\n    const { children} = props;   \n    const trigger = useScrollTrigger({\n      disableHysteresis: true,\n      threshold: 0,\n     \n    });\n  \n    return React.cloneElement(children, {\n      elevation: trigger ? 4 : 0,\n    });\n  }\n/////////////////////////////////////////\n\nconst useStyles = makeStyles(theme => ({\n    toolbarMargin: {\n        ...theme.mixins.toolbar,\n        marginBottom: \"3em\",\n        [theme.breakpoints.down(\"md\")] : {marginBottom: \"1.5em\"},\n        [theme.breakpoints.down(\"xs\")] : {marginBottom: \"1.5em\"}\n    },\n    headtitle:{\n        height: \"1.5em\",\n        margin: \"15px\",\n        [theme.breakpoints.down(\"md\")] : {height: \"1em\"},\n        [theme.breakpoints.down(\"xs\")] : {height: \"0.5em\"}, \n        [theme.breakpoints.down(\"xs\")] : {marginBottom: \"0.8em\"}\n    },\n    tabContainer: {\n        marginLeft:\"auto\"\n    },\n    tab: {\n        ...theme.typography.tab,\n        minWidth: 10,\n        marginLeft: \"25px\"\n    },\n    button: {\n        ...theme.typography.exit,\n        borderRadius: \"50px\",\n        marginLeft: \"50px\",\n        marginRight: \"25px\",\n        height: \"35px\",\n        \n        \n    },\n    menu: {\n        backgroundColor: theme.palette.common.red,\n        color: \"white\",\n        borderRadius: \"0px\"\n    },\n    menuItem: {\n        ...theme.typography.tab,\n        opacity: 0.7,\n        \"&:hover\": {\n            opacity: 1\n        }\n    },\n\n    drawerIconContainer: {\n        marginLeft:\"auto\",\n        \"&:hover\": {\n            backgroundColor: \"transparent\"\n        },\n        \n    },\n    drawer: {\n        backgroundColor: theme.palette.common.red\n    },\n    drawerItem: {\n        ...theme.typography.tab,\n        color: \"white\",\n        opacity: 0.7\n    },\n    buttonDrawer: {\n        ...theme.typography.exit,\n        borderRadius: \"50px\",\n        marginLeft: \"30px\",\n        marginRight: \"25px\",\n        height: \"35px\",\n        \n    },\n    drawerItemSelected: {\n        opacity:1\n    },\n    nested: {\n        paddingLeft: theme.spacing(4)\n    }\n   \n  \n}))\n  \n/////////////////////////////////\n\nconst HeaderAdmin = (props) => {\n    const classes = useStyles();\n    const [value, setValue] = useState(0);\n    const [anchorEL, setAnchorEL] = useState(null);\n    const [openMenu, setOpenMenu] = useState(false);\n    const [selectedIndex, setSelectedIndex] = useState(0);\n    const theme = useTheme();\n    const iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\n    const matches = useMediaQuery(theme.breakpoints.down(\"md\"))\n    const [open, setOpen] = React.useState(true);\n    const [openDrawer, setOpenDrawer] = useState(false)\n\n    const handleChange = (e, newValue) => {\n        setValue(newValue)\n    }\n    const handleClick = (e) => {\n        setAnchorEL(e.currentTarget)\n        setOpenMenu(true)\n    }\n    const handleClickDrawer = () => {\n        setOpen(!open);\n      };\n    const handleClose  = (e) => {\n        setAnchorEL(null)\n        setOpenMenu(false)\n    }\n\n    const handleMenuItemClick = (e, i) => {\n        setAnchorEL(null);\n        setOpenMenu(false);\n        setSelectedIndex(i);\n    }\n\n    const menuSpecialistOptions = [{name: \"Add\", link: \"/adminspecialistadd\"},\n                         {name: \"Delete\", link: \"/adminspecialistdelete\"},\n                         {name: \"Update\", link: \"/adminspecialistupdate\"}];\n\n    const menuLabourOptions = [{name: \"Add\", link: \"/adminlabouradd\"},\n                               {name: \"Delete\", link: \"/adminlabourdelete\"},\n                               {name: \"Update\", link: \"/adminlabourupdate\"}];\n\n    const menuWorksiteOptions = [{name: \"Add\", link: \"/adminworksiteadd\"},\n                                 {name: \"Delete\", link: \"/adminworksitedelete\"},\n                                 {name: \"Map\", link: \"/View\"}];\n\n\n    useEffect(() => {\n        if(window.location.pathname === \"/specialist\" && value !== 0){\n            setValue(0)\n        } \n        else if (window.location.pathname === \"/labour\" && value !== 1){\n            setValue(1) } \n        else if (window.location.pathname === \"/worksite\" && value !== 2){\n                setValue(2) } \n\n        switch (window.location.pathname) {\n            case \"/specialist\":\n                if(value !== 0) {\n                    setValue(0);\n                }\n                break;\n            case \"/adminspecialistadd\":\n                if(value !== 1) {\n                    setValue(1);\n                    setSelectedIndex(0);\n                } \n                break;\n            case \"/adminspecialistdelete\":\n                if(value !== 1) {\n                    setValue(1);\n                    setSelectedIndex(1);\n                }\n                break;\n            case \"/adminspecialistupdate\":\n                if(value !== 1) {\n                    setValue(1);\n                    setSelectedIndex(2);\n                }\n                break;\n            case \"/labour\":\n                if(value !== 1) {\n                    setValue(1);\n                    \n                }\n                break;\n            case \"/adminlabouradd\":\n                if(value !== 1) {\n                    setValue(1);\n                    setSelectedIndex(0);\n                }\n                break;\n            case \"/adminlabourdelete\":\n                if(value !== 1) {\n                   setValue(1);\n                    setSelectedIndex(1);\n                }\n                break;\n            case \"/adminlabourupdate\":\n                if(value !== 1) {\n                    setValue(1);\n                    setSelectedIndex(2);\n                }\n                break;\n            case \"/worksite\":\n                if(value !== 2) {\n                    setValue(2);\n                    \n                }\n                break;\n            case \"/adminworksiteadd\":\n                if(value !== 1) {\n                    setValue(1);\n                    setSelectedIndex(0);\n                }\n                break;\n            case \"/adminworksitedelete\":\n                if(value !== 1) {\n                   setValue(1);\n                    setSelectedIndex(1);\n                }\n                break;\n            case \"/adminworksitemap\":\n                if(value !== 1) {\n                    setValue(1);\n                    setSelectedIndex(2);\n                }\n                break;\n            \n            default: break;\n        }\n    }, [value]); \n   \n\n    const tabs = (\n        <React.Fragment>\n                <Tabs\n                              value={value} \n                              onChange={handleChange} \n                              className={classes.tabContainer}\n                              indicatorColor=\"primary\"\n                            >\n                                <Tab\n                                aria-owns={anchorEL ? \"simple-menu\" : undefined}\n                                aria-haspopup={anchorEL ? \"true\" : undefined}\n                                onMouseOver={event => handleClick(event)}\n                                className={classes.tab} label=\"Specialist\"  />\n\n\n                                <Tab \n                                 aria-owns={anchorEL ? \"simple-labour\" : undefined}\n                                 aria-haspopup={anchorEL ? \"true\" : undefined}\n                                 onMouseOver={event => handleClick(event)}\n                                 className={classes.tab} label=\"Labour\" />\n\n\n                                <Tab \n                                 aria-owns={anchorEL ? \"simple-worksite\" : undefined}\n                                 aria-haspopup={anchorEL ? \"true\" : undefined}\n                                 onMouseOver={event => handleClick(event)}\n                                 className={classes.tab} label=\"WorkSite\" />\n                                \n                            </Tabs>\n                            <Button variant=\"contained\" color=\"secondary\" className={classes.button} component={Link} to=\"/\">\n                                Exit\n                            </Button>\n\n\n                            <Menu \n                               id=\"simple-menu\" \n                               anchorEl={anchorEL} \n                               open={openMenu} \n                               classes={{paper: classes.menu}}\n                               onClose={handleClose}\n                               MenuListProps={{onMouseLeave: handleClose}}\n                               elevation={0}\n                               keepMounted\n                            >\n                              {menuSpecialistOptions.map((option1, i) => (\n                                  <MenuItem key={option1} component={Link} to={option1.link}\n                                   classes={{root: classes.menuItem}}\n                                   onClick={(event) => {\n                                       handleMenuItemClick(event, i);\n                                       setValue(0);\n                                       handleClose()\n                                   }}\n                                   selected={i === selectedIndex && value === 1}>\n                                    {option1.name}\n                                  </MenuItem>\n                              ))}\n                            </Menu>\n\n\n\n                            <Menu \n                               id=\"simple-labour\" \n                               anchorEl={anchorEL} \n                               open={openMenu} \n                               classes={{paper: classes.menu}}\n                               onClose={handleClose}\n                               MenuListProps={{onMouseLeave: handleClose}}\n                               elevation={0}\n                               keepMounted\n                            >\n                              {menuLabourOptions.map((option2, i) => (\n                                  <MenuItem key={option2} component={Link} to={option2.link}\n                                   classes={{root: classes.menuItem}}\n                                   onClick={(event) => {\n                                       handleMenuItemClick(event, i);\n                                       setValue(1);\n                                       handleClose()\n                                   }}\n                                   selected={i === selectedIndex && value === 1}>\n                                    {option2.name}\n                                  </MenuItem>\n                              ))}\n                            </Menu>\n\n\n\n                            <Menu \n                               id=\"simple-worksite\" \n                               anchorEl={anchorEL} \n                               open={openMenu} \n                               classes={{paper: classes.menu}}\n                               onClose={handleClose}\n                               MenuListProps={{onMouseLeave: handleClose}}\n                               elevation={0}\n                               keepMounted\n                            >\n                               {menuWorksiteOptions.map((option, i) => (\n                                  <MenuItem key={option} component={Link} to={option.link}\n                                   classes={{root: classes.menuItem}}\n                                   onClick={(event) => {\n                                       handleMenuItemClick(event, i);\n                                       setValue(2);\n                                       handleClose()\n                                   }}\n                                   selected={i === selectedIndex && value === 1}>\n                                    {option.name}\n                                  </MenuItem>\n                              ))}\n                            </Menu>\n        </React.Fragment>\n    )\n    \n    const drawer = (\n        <React.Fragment>\n            <SwipeableDrawer \n               disableBackdropTransition={!iOS} \n               disableDiscovery={iOS} \n               open={openDrawer}\n               onClose={() => setOpenDrawer(false)}\n               onOpen={() => setOpenDrawer(true)}\n               classes={{paper: classes.drawer}}\n            >\n                <div className={classes.toolbarMargin} /> \n                <List disablePadding>\n                       <ListItem \n                              divider button \n                              selected={value === 0}\n                              classes={{selected: classes.drawerItemSelected}}\n                              onClick={handleClickDrawer}\n                              >\n                        <ListItemText\n                          className={classes.drawerItem}\n                          \n                          disableTypography primary=\"Specialist\" />\n                          \n                          {open ? <ExpandLess /> : <ExpandMore />}\n                          </ListItem>\n\n                          \n                          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                                <List component=\"div\" disablePadding>\n                                <ListItem button className={classes.nested} component={Link} to=\"/adminspecialistadd\">\n                                    <ListItemText primary=\"Add\" />\n                                </ListItem>\n                                <ListItem button className={classes.nested} component={Link} to=\"/adminspecialistdelete\">\n                                    <ListItemText primary=\"Delete\" />\n                                </ListItem>\n                                <ListItem button className={classes.nested} component={Link} to=\"/adminspecialistupdate\">\n                                    <ListItemText primary=\"Update\" />\n                                </ListItem>\n                                </List>\n                         </Collapse>\n                            \n                        \n\n                   \n\n                         <ListItem \n                              divider button \n                              selected={value === 0}\n                              classes={{selected: classes.drawerItemSelected}}\n                              onClick={handleClickDrawer}\n                              >\n                        <ListItemText\n                          className={classes.drawerItem}\n                          disableTypography primary=\"Labour\" />\n                          \n                          {open ? <ExpandLess /> : <ExpandMore />}\n                          </ListItem>\n\n                          \n                          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                                <List component=\"div\" disablePadding>\n                                <ListItem button className={classes.nested} component={Link} to=\"/adminlabouradd\">\n                                    <ListItemText primary=\"Add\" />\n                                </ListItem>\n                                <ListItem button className={classes.nested} component={Link} to=\"/adminlabourdelete\">\n                                    <ListItemText primary=\"Delete\" />\n                                </ListItem>\n                                <ListItem button className={classes.nested} component={Link} to=\"/adminlabourupdate\">\n                                    <ListItemText primary=\"Update\" />\n                                </ListItem>\n                                </List>\n                         </Collapse>\n\n\n\n\n                         <ListItem \n                              divider button \n                              selected={value === 0}\n                              classes={{selected: classes.drawerItemSelected}}\n                              onClick={handleClickDrawer}\n                              >\n                        <ListItemText\n                          className={classes.drawerItem}\n                          disableTypography primary=\"WorkSite\"  />\n                          \n                          {open ? <ExpandLess /> : <ExpandMore />}\n                          </ListItem>\n\n                          \n                          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                                <List component=\"div\" disablePadding>\n                                <ListItem button className={classes.nested} component={Link} to=\"/adminworksiteadd\">\n                                    <ListItemText primary=\"Add\" />\n                                </ListItem>\n                                <ListItem button className={classes.nested} component={Link} to=\"/adminworksitedelete\">\n                                    <ListItemText primary=\"Delete\" />\n                                </ListItem>\n                                <ListItem button className={classes.nested} component={Link} to=\"/View\">\n                                    <ListItemText primary=\"Map\" />\n                                </ListItem>\n                                </List>\n                         </Collapse>\n\n\n\n\n                    <ListItem onClick={() => setOpenDrawer(false)} divider button component={Link} to=\"/\">\n                    <Button variant=\"contained\" color=\"secondary\" className={classes.buttonDrawer} component={Link} to=\"/\">\n                                Exit\n                            </Button>\n\n                    </ListItem>\n                </List>\n            </SwipeableDrawer>\n\n            <IconButton\n               onClick={() => setOpenDrawer(!openDrawer)} \n               className={classes.drawerIconContainer}\n               disableRipple\n            >\n                <MenuIcon />\n            </IconButton>\n        </React.Fragment>\n    )\n\n    return (\n        <React.Fragment>\n                <ElevationScroll>\n                    <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n                        <Toolbar>\n                            <Button \n                              component={Link} \n                              to=\"/\" \n                              onClick={() => setValue(0)}\n                              disableRipple\n                            >\n                                <Typography variant=\"h4\" color=\"secondary\" className={classes.headtitle}>\n                                    SEEREM\n                                </Typography>\n                            </Button>\n                            \n                                {matches ? drawer : tabs}\n\n                        </Toolbar>\n                    </AppBar>\n               </ElevationScroll>\n            <div className={classes.toolbarMargin} />\n        </React.Fragment>\n        \n        \n    )\n}\n\nexport default HeaderAdmin\n","/Users/jianpingzuo/Desktop/front-end-test/src/components/ui/EnhancedTableLabourDelete.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/ui/EnhancedTableWorksiteDelete.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/MapView.js",["195","196"],"import React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nimport CurrentLocation from './Map';\n\nconst mapStyles = { \n  //width: '100%',\n  //height:'550px'\n};\n\nexport class MapContainer extends Component {\n    state = {\n        showingInfoWindow: false,  // Hides or shows the InfoWindow\n        activeMarker: {},          // Shows the active marker upon click\n        selectedPlace: {}          // Shows the InfoWindow to the selected place upon a marker\n      };\n\n      onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n  render() {\n    return (\n\n      <CurrentLocation\n        centerAroundCurrentLocation\n        google={this.props.google}\n        \n        zoom={14}\n      >\n        <Marker onClick={this.onMarkerClick} name={'User Location'} />\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n          \n        >\n          <div>\n            <h4>{this.state.selectedPlace.name}</h4>\n          </div>\n        </InfoWindow>\n      </CurrentLocation>\n     /* <Map\n        google={this.props.google}\n        zoom={14}\n        style={mapStyles}\n        initialCenter={\n          {\n            lat: 43.6373435,\n            lng: -79.45912679999999\n          }\n        }\n        >\n        <Marker\n          onClick={this.onMarkerClick}\n          name={'User Location'}\n        />\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <h4>{this.state.selectedPlace.name}</h4>\n          </div>\n        </InfoWindow>\n\n        </Map>*/\n      \n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyAJRUF6JyAGhuEXiHmKVF6cRldIXU9OHow'\n})(MapContainer);","/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageViewTable.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/Date.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/Map.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageWorksiteTable.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageSpecialistTable.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/adminpage/AdminPageLabourTable.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/Time.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/specialistpage/specialistProjectTable/SpecialistProjectTable.js",[],"/Users/jianpingzuo/Desktop/front-end-test/src/components/ui/EnhancedTable.js",[],{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":1,"column":16,"nodeType":"203","messageId":"204","endLine":1,"endColumn":24},{"ruleId":"201","severity":1,"message":"205","line":1,"column":26,"nodeType":"203","messageId":"204","endLine":1,"endColumn":35},{"ruleId":"201","severity":1,"message":"206","line":1,"column":38,"nodeType":"203","messageId":"204","endLine":1,"endColumn":44},{"ruleId":"201","severity":1,"message":"207","line":2,"column":27,"nodeType":"203","messageId":"204","endLine":2,"endColumn":33},{"ruleId":"208","severity":1,"message":"209","line":34,"column":6,"nodeType":"210","endLine":34,"endColumn":23,"suggestions":"211"},{"ruleId":"212","severity":1,"message":"213","line":99,"column":34,"nodeType":"214","messageId":"215","endLine":99,"endColumn":36},{"ruleId":"201","severity":1,"message":"216","line":1,"column":16,"nodeType":"203","messageId":"204","endLine":1,"endColumn":25},{"ruleId":"201","severity":1,"message":"217","line":4,"column":8,"nodeType":"203","messageId":"204","endLine":4,"endColumn":17},{"ruleId":"201","severity":1,"message":"218","line":6,"column":8,"nodeType":"203","messageId":"204","endLine":6,"endColumn":21},{"ruleId":"201","severity":1,"message":"219","line":7,"column":8,"nodeType":"203","messageId":"204","endLine":7,"endColumn":21},{"ruleId":"201","severity":1,"message":"220","line":8,"column":8,"nodeType":"203","messageId":"204","endLine":8,"endColumn":13},{"ruleId":"201","severity":1,"message":"221","line":9,"column":8,"nodeType":"203","messageId":"204","endLine":9,"endColumn":17},{"ruleId":"201","severity":1,"message":"222","line":10,"column":8,"nodeType":"203","messageId":"204","endLine":10,"endColumn":17},{"ruleId":"201","severity":1,"message":"223","line":11,"column":8,"nodeType":"203","messageId":"204","endLine":11,"endColumn":22},{"ruleId":"201","severity":1,"message":"224","line":12,"column":8,"nodeType":"203","messageId":"204","endLine":12,"endColumn":17},{"ruleId":"201","severity":1,"message":"225","line":13,"column":8,"nodeType":"203","messageId":"204","endLine":13,"endColumn":16},{"ruleId":"201","severity":1,"message":"226","line":14,"column":8,"nodeType":"203","messageId":"204","endLine":14,"endColumn":13},{"ruleId":"201","severity":1,"message":"227","line":15,"column":8,"nodeType":"203","messageId":"204","endLine":15,"endColumn":22},{"ruleId":"201","severity":1,"message":"228","line":57,"column":11,"nodeType":"203","messageId":"204","endLine":57,"endColumn":16},{"ruleId":"201","severity":1,"message":"228","line":56,"column":11,"nodeType":"203","messageId":"204","endLine":56,"endColumn":16},{"ruleId":"201","severity":1,"message":"228","line":56,"column":11,"nodeType":"203","messageId":"204","endLine":56,"endColumn":16},{"ruleId":"201","severity":1,"message":"218","line":6,"column":8,"nodeType":"203","messageId":"204","endLine":6,"endColumn":21},{"ruleId":"201","severity":1,"message":"219","line":7,"column":8,"nodeType":"203","messageId":"204","endLine":7,"endColumn":21},{"ruleId":"201","severity":1,"message":"220","line":8,"column":8,"nodeType":"203","messageId":"204","endLine":8,"endColumn":13},{"ruleId":"201","severity":1,"message":"221","line":9,"column":8,"nodeType":"203","messageId":"204","endLine":9,"endColumn":17},{"ruleId":"201","severity":1,"message":"222","line":10,"column":8,"nodeType":"203","messageId":"204","endLine":10,"endColumn":17},{"ruleId":"201","severity":1,"message":"223","line":11,"column":8,"nodeType":"203","messageId":"204","endLine":11,"endColumn":22},{"ruleId":"201","severity":1,"message":"224","line":12,"column":8,"nodeType":"203","messageId":"204","endLine":12,"endColumn":17},{"ruleId":"201","severity":1,"message":"225","line":13,"column":8,"nodeType":"203","messageId":"204","endLine":13,"endColumn":16},{"ruleId":"201","severity":1,"message":"226","line":14,"column":8,"nodeType":"203","messageId":"204","endLine":14,"endColumn":13},{"ruleId":"201","severity":1,"message":"227","line":15,"column":8,"nodeType":"203","messageId":"204","endLine":15,"endColumn":22},{"ruleId":"201","severity":1,"message":"228","line":57,"column":11,"nodeType":"203","messageId":"204","endLine":57,"endColumn":16},{"ruleId":"201","severity":1,"message":"228","line":56,"column":11,"nodeType":"203","messageId":"204","endLine":56,"endColumn":16},{"ruleId":"201","severity":1,"message":"218","line":6,"column":8,"nodeType":"203","messageId":"204","endLine":6,"endColumn":21},{"ruleId":"201","severity":1,"message":"219","line":7,"column":8,"nodeType":"203","messageId":"204","endLine":7,"endColumn":21},{"ruleId":"201","severity":1,"message":"220","line":8,"column":8,"nodeType":"203","messageId":"204","endLine":8,"endColumn":13},{"ruleId":"201","severity":1,"message":"221","line":9,"column":8,"nodeType":"203","messageId":"204","endLine":9,"endColumn":17},{"ruleId":"201","severity":1,"message":"222","line":10,"column":8,"nodeType":"203","messageId":"204","endLine":10,"endColumn":17},{"ruleId":"201","severity":1,"message":"223","line":11,"column":8,"nodeType":"203","messageId":"204","endLine":11,"endColumn":22},{"ruleId":"201","severity":1,"message":"224","line":12,"column":8,"nodeType":"203","messageId":"204","endLine":12,"endColumn":17},{"ruleId":"201","severity":1,"message":"225","line":13,"column":8,"nodeType":"203","messageId":"204","endLine":13,"endColumn":16},{"ruleId":"201","severity":1,"message":"226","line":14,"column":8,"nodeType":"203","messageId":"204","endLine":14,"endColumn":13},{"ruleId":"201","severity":1,"message":"227","line":15,"column":8,"nodeType":"203","messageId":"204","endLine":15,"endColumn":22},{"ruleId":"201","severity":1,"message":"228","line":57,"column":11,"nodeType":"203","messageId":"204","endLine":57,"endColumn":16},{"ruleId":"201","severity":1,"message":"229","line":10,"column":8,"nodeType":"203","messageId":"204","endLine":10,"endColumn":12},{"ruleId":"201","severity":1,"message":"230","line":21,"column":8,"nodeType":"203","messageId":"204","endLine":21,"endColumn":20},{"ruleId":"201","severity":1,"message":"231","line":2,"column":10,"nodeType":"203","messageId":"204","endLine":2,"endColumn":13},{"ruleId":"201","severity":1,"message":"232","line":5,"column":7,"nodeType":"203","messageId":"204","endLine":5,"endColumn":16},"no-native-reassign",["233"],"no-negated-in-lhs",["234"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'scroll' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'CONNECTION_PORT'. Either exclude it or remove the dependency array. Outer scope values like 'CONNECTION_PORT' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["235"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Component' is defined but never used.","'seeRemImg' is defined but never used.","'InputAdorment' is defined but never used.","'AddCircleIcon' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'Paper' is defined but never used.","'FilterListIcon' is defined but never used.","'theme' is assigned a value but never used.","'Link' is defined but never used.","'ListItemIcon' is defined but never used.","'Map' is defined but never used.","'mapStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"236","fix":"237"},"Update the dependencies array to be: []",{"range":"238","text":"239"},[838,855],"[]"]